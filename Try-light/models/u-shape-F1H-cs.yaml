# YOLOv5 🚀 by Ultralytics, GPL-3.0 license

# Parameters
nc: 8  # number of classes
depth_multiple: 0.67  # model depth multiple
width_multiple: 0.75  # layer channel multiple
anchors:
  # - [9,12, 17,15, 25,28]  # P3/8
  # - [42,42, 91,56, 68,94]  # P4/16
  # - [177,101, 140,245, 555,343]  # P5/32

  - [ 5,6, 8,9, 15,17]  # P3/8
  - [26,28, 50,26, 40,52]  # P4/16
  - [82,52, 76,112, 178,109]  # P5/32

  # - [10,13, 16,30, 33,23]  # P3/8
  # - [30,61, 62,45, 59,119]  # P4/16
  # - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 v6.0 backbone
backbone:
  # [from, number, module, args]
  #第一列：从哪一层获得输入，-1表示上一层，第一列若是[-1,6]表示从第六层和上一层两层获得
  #第二列：表示有几个相同的模块
  #第三列：模块名称，这些模块位于commom.py中
  #第四列：参数
  [[-1, 1, Conv, [64, 6, 2, 2]],  # 0-P1/2 输出通道数量  卷积核尺寸  步长  padding  320*320*64
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4   输出通道数量  卷积核尺寸  160*160*128
   [-1, 3, C3, [128]],  #保持通道数和图片大小   160*160*128
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8     80*80*256
   [-1, 6, C3, [256]],  #head1
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16    40*40*512
   [-1, 9, C3, [512]],    #head0
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32   20*20*1024
   [-1, 3, C3, [1024]],
   [-1, 1, SPPF, [1024]],  # 9    20*20*1024  
  ]

# YOLOv5 v6.0 head
head:
  [[-1, 1, Conv, [512, 1, 1]],  # 20*20*512   #head3
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  #40*40*512
   [[-1, 6], 1, Concat, [1]],  # cat backbone P4  40*40*1024
   [-1, 3, C3, [512, False]],  # 13   40*40*512  

   [-1, 1, Conv, [256, 1, 1]],  #40*40*256   head2
   [-1, 1, nn.Upsample, [None, 2, 'nearest']],  #80*80*256
   [[-1, 4], 1, Concat, [1]],  # cat backbone P3  #80*80*512
   [-1, 3, C3, [256, False]],  # 17 (P3/8-small)  #80*80*256

   [-1, 1, Conv, [256, 3, 2]], #40*40*256
   [[-1, 14], 1, Concat, [1]],  # cat head P4  40*40*512 
   [-1, 3, C3, [512, False]],  # 20 (P4/16-medium) 40*40*512  

   [-1, 1, Conv, [512, 3, 2]],  #20*20*512
   [[-1, 10], 1, Concat, [1]],  # cat head P5  20*20*1024
   [-1, 3, C3, [1024, False]],  # 23 (P5/32-large)  20*20*1024

   [[17, 20, 23], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
railseg:

#从分支引出u-net-联系深层---------------------------------------------------------------------------------------
    [[ 23, 1, Conv, [512, 3, 1]],  #20*20*512
     [[-1, 21], 1, Concat, [1]],  #20*20*1024   
     [ -1, 1, C3, [512, False]], #20*20*512                            
     [ -1, 1, nn.Upsample, [None, 2, 'nearest']], #40*40*512
     [[-1,20],1,Concat,[1]],   #40*40*1024                    
     [ -1, 1, C3, [512, False]],  #40*40*512                                      
     [ -1, 1, Conv, [256, 3, 1]],  #40*40*256                                    
     [ -1, 1, nn.Upsample, [None, 2, 'nearest']],   #80*80*256                   
     [[-1,17],1,Concat,[1]],  #80*80*512
     [ -1, 1, C3, [256, False]],  #80*80*256                                       
     [ -1, 1, Conv, [128, 3, 1]], #80*80*128                                      
     [ -1, 1, nn.Upsample, [None, 2, 'nearest']],  #160*160*128                    
     #[[-1,2], 1, Concat,[1]],  #160*160*256
     [ -1, 1, C3, [64, False]], #160*160*64
     [ -1, 1, Conv, [32, 3, 1]], #160*160*32                                   
     [ -1, 1, nn.Upsample, [None, 2, 'nearest']],  #320*320*32                    
     [ -1, 1, C3, [16, False]], #                                       
     [ -1, 1, Conv, [8, 3, 1]],                                      
     [ -1, 1, nn.Upsample, [None, 2, 'nearest']],                     
     [ -1, 1, C3, [8, False]],                                        
     [ -1, 1, Conv, [3, 3, 1]],  #44                                      
    ]